-- Active: 1721291050538@@127.0.0.1@3306@sakila
USE sakila;
--List the number of films per category.
SELECT COUNT(fc.category_id), ca.name
FROM film_category AS fc
JOIN category AS ca  
ON fc.category_id = ca.category_id
GROUP BY ca.name;
--Retrieve the store ID, city, and country for each store.
SELECT ci.city, co.country, s.store_id
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS ci
ON a.city_id = ci.city_id
JOIN country AS co
ON co.country_id = ci.country_id;
--Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;
--Determine the average running time of films for each category.
SELECT ROUND(AVG(f.length),2), ca.name
FROM film AS f
JOIN film_category AS fc 
ON f.film_id = fc.film_id
JOIN category AS ca
ON fc.category_id = ca.category_id
GROUP BY ca.name;
--Identify the film categories with the longest average running time.
SELECT ROUND(AVG(f.length),2), ca.name
FROM film AS f
JOIN film_category AS fc 
ON f.film_id = fc.film_id
JOIN category AS ca
ON fc.category_id = ca.category_id
GROUP BY ca.name
ORDER BY ROUND(AVG(f.length),2) DESC;
--Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) 
FROM film AS f 
JOIN inventory as i 
ON f.film_id = i.film_id
JOIN rental as r
ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY COUNT(i.inventory_id) DESC LIMIT 10;
--Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN store AS s
ON  s.store_id = i.store_id
WHERE f.title = 'ACADEMY DINOSAUR' AND s.store_id = '1';
--Provide a list of all distinct film titles, along with their availability status in the inventory. 
--Include a column indicating whether each title is 'Available' or 'NOT available.'
--Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL." 
SELECT title, 
  CASE 
      WHEN inventory_id IS NULL THEN 'NOT available'
      ELSE 'Available'
  END AS availability_status
FROM (
    SELECT DISTINCT f.title, i.inventory_id
    FROM film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
) AS film_availability
ORDER BY title;

